package com.maestria.agenda.controller;

import com.maestria.agenda.servico.DadosServico;
import com.maestria.agenda.servico.Servico;
import com.maestria.agenda.servico.ServicoRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;
import jakarta.validation.Valid;
import java.util.List;

@RestController
@RequestMapping("/servico")
@CrossOrigin(origins = "*")
public class ServicoController {

    private static final Logger logger = LoggerFactory.getLogger(ServicoController.class);
    
    private final ServicoRepository servicoRepository;

    public ServicoController(ServicoRepository servicoRepository) {
        this.servicoRepository = servicoRepository;
    }

    @GetMapping
    public ResponseEntity<List<Servico>> listarServicos() {
        logger.info("üîç Listando todos os servi√ßos");
        return ResponseEntity.ok(servicoRepository.findAll());
    }

    @GetMapping("/{id}")
    public ResponseEntity<?> buscarServicoPorId(@PathVariable Long id) {
        logger.info("üîç Buscando servi√ßo com ID: {}", id);
        return servicoRepository.findById(id)
                .map(ResponseEntity::ok)
                .orElseGet(() -> {
                    logger.warn("‚ùå Servi√ßo n√£o encontrado. ID: {}", id);
                    return ResponseEntity.status(404).build();
                });
    }

    @PostMapping
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<?> cadastrarServico(
            @RequestBody @Valid DadosServico dados,
            @AuthenticationPrincipal UserDetails userDetails) {
        
        logger.info("üîç Solicita√ß√£o para cadastrar servi√ßo por: {}", userDetails.getUsername());
        
        try {
            if (servicoRepository.existsByNome(dados.nome())) {
                logger.warn("‚ùå J√° existe um servi√ßo com o nome: {}", dados.nome());
                return ResponseEntity.badRequest().body("J√° existe um servi√ßo com este nome.");
            }
            
            Servico servico = new Servico();
            servico.setNome(dados.nome());
            servico.setValor(dados.valor());
            servico.setDescricao(dados.descricao());
            servico.setDuracao(dados.duracao());
            
            servicoRepository.save(servico);
            
            logger.info("‚úÖ Servi√ßo cadastrado com sucesso: {}", servico);
            return ResponseEntity.ok(servico);
        } catch (Exception e) {
            logger.error("‚ùå Erro ao cadastrar servi√ßo", e);
            return ResponseEntity.status(500).body("Erro ao cadastrar servi√ßo.");
        }
    }

    @PutMapping("/{id}")
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<?> atualizarServico(
            @PathVariable Long id,
            @RequestBody @Valid DadosServico dados,
            @AuthenticationPrincipal UserDetails userDetails) {
        
        logger.info("üîç Solicita√ß√£o para atualizar servi√ßo {} por: {}", id, userDetails.getUsername());
        
        try {
            return servicoRepository.findById(id)
                    .map(servico -> {
                        // Verifica se j√° existe outro servi√ßo com este nome
                        Servico existente = servicoRepository.findByNome(dados.nome());
                        if (existente != null && !existente.getId().equals(id)) {
                            logger.warn("‚ùå J√° existe outro servi√ßo com o nome: {}", dados.nome());
                            return ResponseEntity.badRequest().body("J√° existe outro servi√ßo com este nome.");
                        }
                        
                        servico.setNome(dados.nome());
                        servico.setValor(dados.valor());
                        servico.setDescricao(dados.descricao());
                        servico.setDuracao(dados.duracao());
                        
                        servicoRepository.save(servico);
                        
                        logger.info("‚úÖ Servi√ßo atualizado com sucesso: {}", servico);
                        return ResponseEntity.ok(servico);
                    })
                    .orElseGet(() -> {
                        logger.warn("‚ùå Servi√ßo n√£o encontrado. ID: {}", id);
                        return ResponseEntity.status(404).body("Servi√ßo n√£o encontrado.");
                    });
        } catch (Exception e) {
            logger.error("‚ùå Erro ao atualizar servi√ßo", e);
            return ResponseEntity.status(500).body("Erro ao atualizar servi√ßo.");
        }
    }

    @DeleteMapping("/{id}")
    @PreAuthorize("hasAuthority('ADMIN')")
    public ResponseEntity<?> excluirServico(
            @PathVariable Long id,
            @AuthenticationPrincipal UserDetails userDetails) {
        
        logger.info("üîç Solicita√ß√£o para excluir servi√ßo {} por: {}", id, userDetails.getUsername());
        
        if (!userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
            logger.warn("‚ùå Tentativa de exclus√£o de servi√ßo sem permiss√£o por {}", userDetails.getUsername());
            return ResponseEntity.status(403).body("Acesso negado. Apenas ADMIN pode excluir servi√ßos.");
        }
        
        try {
            if (!servicoRepository.existsById(id)) {
                logger.warn("‚ùå Servi√ßo n√£o encontrado. ID: {}", id);
                return ResponseEntity.status(404).body("Servi√ßo n√£o encontrado.");
            }
            
            servicoRepository.deleteById(id);
            
            logger.info("‚úÖ Servi√ßo exclu√≠do com sucesso. ID: {}", id);
            return ResponseEntity.ok("Servi√ßo exclu√≠do com sucesso.");
        } catch (Exception e) {
            logger.error("‚ùå Erro ao excluir servi√ßo", e);
            return ResponseEntity.status(500).body("Erro ao excluir servi√ßo.");
        }
    }
}