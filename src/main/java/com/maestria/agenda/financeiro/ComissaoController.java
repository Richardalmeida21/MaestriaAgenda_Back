package com.maestria.agenda.financeiro;

import com.maestria.agenda.profissional.Profissional;
import com.maestria.agenda.profissional.ProfissionalRepository;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;

import java.time.LocalDate;
import java.util.List;

@RestController
@RequestMapping("/financeiro")
@CrossOrigin(origins = "*")
public class ComissaoController {

    private static final Logger logger = LoggerFactory.getLogger(ComissaoController.class);

    private final ComissaoService comissaoService;
    private final ProfissionalRepository profissionalRepository;

    public ComissaoController(ComissaoService comissaoService, ProfissionalRepository profissionalRepository) {
        this.comissaoService = comissaoService;
        this.profissionalRepository = profissionalRepository;
    }

    /**
     * Endpoint para listar todas as comiss√µes (apenas ADMIN)
     * Retorna comiss√µes de todos os profissionais para o m√™s atual
     */
    @GetMapping("/comissoes")
public ResponseEntity<?> listarComissoes(
        @RequestParam(required = false) String dataInicio,
        @RequestParam(required = false) String dataFim,
        @AuthenticationPrincipal UserDetails userDetails) {
        
    logger.info("üîç Solicitando listagem de comiss√µes por {} no per√≠odo de {} a {}", 
        userDetails.getUsername(), dataInicio, dataFim);

    // Verificar permiss√£o ADMIN
    if (!userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
        logger.warn("‚ùå Tentativa de acesso n√£o autorizado √†s comiss√µes por {}", userDetails.getUsername());
        return ResponseEntity.status(403).body("Acesso negado. Apenas ADMIN pode acessar todas as comiss√µes.");
    }

    try {
        LocalDate inicio;
        LocalDate fim;
        
        // Use provided dates or default to current month
        if (dataInicio != null && dataFim != null) {
            inicio = LocalDate.parse(dataInicio);
            fim = LocalDate.parse(dataFim);
        } else {
            // Define o m√™s atual como per√≠odo padr√£o
            inicio = LocalDate.now().withDayOfMonth(1);
            fim = LocalDate.now().withDayOfMonth(LocalDate.now().lengthOfMonth());
        }
        
        List<ComissaoResponseDTO> comissoes = comissaoService.listarTodasComissoesNoPeriodo(inicio, fim);
        return ResponseEntity.ok(comissoes);
    } catch (Exception e) {
        logger.error("‚ùå Erro ao listar comiss√µes: {}", e.getMessage(), e);
        return ResponseEntity.status(500).body("Erro ao listar comiss√µes: " + e.getMessage());
    }
}

    /**
     * Endpoint para calcular comiss√£o de um profissional espec√≠fico por per√≠odo
     * Permite acesso pelo ADMIN ou pelo pr√≥prio profissional
     */
    @GetMapping("/comissoes/profissional/{id}")
    public ResponseEntity<?> calcularComissaoPorProfissional(
            @PathVariable Long id,
            @RequestParam String dataInicio,
            @RequestParam String dataFim,
            @AuthenticationPrincipal UserDetails userDetails) {

        logger.info("üîç Solicitando comiss√£o para profissional {} entre {} e {} por {}",
                id, dataInicio, dataFim, userDetails.getUsername());

        // Verifica√ß√£o de permiss√£o
        boolean isAdmin = userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"));
        boolean isProfissionalAcessandoPropriosDados = false;

        if (!isAdmin) {
            // Verificar se √© o pr√≥prio profissional acessando seus dados
            Profissional profissional = profissionalRepository.findByLogin(userDetails.getUsername());
            if (profissional != null && profissional.getId() == id) {
                isProfissionalAcessandoPropriosDados = true;
            }
        }

        if (!isAdmin && !isProfissionalAcessandoPropriosDados) {
            logger.warn("‚ùå Acesso negado para visualizar comiss√µes do profissional {}", id);
            return ResponseEntity.status(403).body("Acesso negado. Voc√™ s√≥ pode ver suas pr√≥prias comiss√µes.");
        }

        try {
            LocalDate inicio = LocalDate.parse(dataInicio);
            LocalDate fim = LocalDate.parse(dataFim);

            ComissaoResponseDTO comissao = comissaoService.calcularComissaoPorPeriodo(id, inicio, fim);
            return ResponseEntity.ok(comissao);
        } catch (Exception e) {
            logger.error("‚ùå Erro ao calcular comiss√£o: {}", e.getMessage(), e);
            return ResponseEntity.status(500).body("Erro ao calcular comiss√£o: " + e.getMessage());
        }
    }
    
    /**
     * Endpoint para marcar uma comiss√£o como paga ou n√£o paga
     * Apenas administradores podem usar este endpoint
     */
    @PutMapping("/comissoes/profissional/{id}/paid")
    public ResponseEntity<?> marcarComissaoComoPaga(
            @PathVariable Long id,
            @RequestParam String dataInicio,
            @RequestParam String dataFim,
            @RequestParam boolean paid,
            @AuthenticationPrincipal UserDetails userDetails) {
            
        logger.info("üîÑ Marcando comiss√£o do profissional {} entre {} e {} como {} por {}",
                id, dataInicio, dataFim, paid ? "PAGA" : "N√ÉO PAGA", userDetails.getUsername());
                
        // Verificar se √© ADMIN
        if (!userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
            logger.warn("‚ùå Tentativa n√£o autorizada de atualizar status de pagamento por {}", 
                    userDetails.getUsername());
            return ResponseEntity.status(403).body("Acesso negado. Apenas administradores podem atualizar status de pagamento.");
        }
        
        try {
            LocalDate inicio = LocalDate.parse(dataInicio);
            LocalDate fim = LocalDate.parse(dataFim);
            
            // O servi√ßo j√° far√° todas as verifica√ß√µes de per√≠odos sobrepostos e status
            ComissaoResponseDTO comissao = comissaoService.atualizarStatusPagamento(id, inicio, fim, paid);
            
            return ResponseEntity.ok(comissao);
        } catch (RuntimeException e) {
            logger.warn("‚ö†Ô∏è Erro de valida√ß√£o ao atualizar status de pagamento: {}", e.getMessage());
            return ResponseEntity.badRequest().body(e.getMessage());
        } catch (Exception e) {
            logger.error("‚ùå Erro ao atualizar status de pagamento da comiss√£o: {}", e.getMessage(), e);
            return ResponseEntity.status(500).body("Erro ao atualizar status de pagamento: " + e.getMessage());
        }
    }
}
